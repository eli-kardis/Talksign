{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 114, "column": 0}, "map": {"version":3,"sources":["file:///Users/gwon-oseo/Talksign/apps/app/src/lib/auth-utils.ts"],"sourcesContent":["import { NextRequest } from 'next/server'\nimport { createClient } from '@supabase/supabase-js'\nimport { jwtVerify, createRemoteJWKSet } from 'jose'\nimport type { Database } from './supabase'\n\n// 서버 사이드에서 인증된 Supabase 클라이언트 생성\nexport function createAuthenticatedSupabaseClient(request: NextRequest) {\n  const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL\n  const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY\n\n  if (!supabaseUrl) {\n    throw new Error('Missing NEXT_PUBLIC_SUPABASE_URL environment variable')\n  }\n\n  if (!supabaseServiceKey) {\n    throw new Error('Missing Supabase service role key')\n  }\n\n  // Authorization 헤더에서 토큰 추출\n  const authHeader = request.headers.get('authorization')\n  const token = authHeader?.replace('Bearer ', '')\n\n  const client = createClient<Database>(supabaseUrl, supabaseServiceKey, {\n    auth: {\n      autoRefreshToken: false,\n      persistSession: false\n    },\n    global: {\n      headers: token ? {\n        Authorization: `Bearer ${token}`\n      } : {}\n    }\n  })\n\n  return client\n}\n\n// JWT 토큰 검증 함수\nasync function verifySupabaseJWT(token: string): Promise<string | null> {\n  try {\n    const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL\n    if (!supabaseUrl) {\n      console.error('Missing NEXT_PUBLIC_SUPABASE_URL for JWT verification')\n      return null\n    }\n\n    // Supabase JWT 검증을 위한 JWKS URL\n    const jwksUrl = new URL(`${supabaseUrl}/rest/v1/jwks`)\n    const JWKS = createRemoteJWKSet(jwksUrl)\n\n    // JWT 검증\n    const { payload } = await jwtVerify(token, JWKS, {\n      issuer: 'supabase',\n      audience: 'authenticated',\n    })\n\n    // 사용자 ID 반환\n    return payload.sub || null\n  } catch (error) {\n    console.log('JWT verification failed:', error)\n    return null\n  }\n}\n\n// 사용자 인증 확인 및 user_id 반환\nexport async function getUserFromRequest(request: NextRequest): Promise<string | null> {\n  try {\n    console.log('Getting user from request, NODE_ENV:', process.env.NODE_ENV)\n\n    // 인증 토큰 확인 시도\n    const authHeader = request.headers.get('authorization')\n    const token = authHeader?.replace('Bearer ', '')\n\n    if (token) {\n      console.log('Token found, attempting validation...')\n\n      try {\n        // JWT 토큰 검증 (보안 강화)\n        const userId = await verifySupabaseJWT(token)\n\n        if (userId && userId !== 'undefined') {\n          console.log('Valid authenticated user from token:', userId)\n\n          // 사용자 존재 확인 (선택적)\n          const supabase = createServerSupabaseClient()\n          const { data: user } = await supabase\n            .from('users')\n            .select('id')\n            .eq('id', userId)\n            .single()\n\n          if (user) {\n            console.log('User exists in database:', user.id)\n            return user.id\n          } else {\n            console.log('User not found in database, creating demo user')\n          }\n        }\n      } catch (tokenError) {\n        console.log('Token verification failed:', tokenError)\n      }\n    } else {\n      console.log('No authorization token found')\n    }\n\n    // 토큰이 없거나 검증 실패 시 데모 사용자 생성/반환\n    console.log('Falling back to demo user')\n    return await getOrCreateDemoUser()\n\n  } catch (error) {\n    console.error('Error getting user from request:', error)\n    // 에러 발생 시에도 데모 사용자 반환\n    return await getOrCreateDemoUser()\n  }\n}\n\n// 데모 사용자 생성 또는 기존 사용자 반환\nasync function getOrCreateDemoUser(): Promise<string> {\n  try {\n    // service role key가 없으면 고정 데모 사용자 ID만 반환\n    if (!process.env.SUPABASE_SERVICE_ROLE_KEY) {\n      console.log('No service role key available, using hardcoded demo user ID')\n      return '80d20e48-7189-4874-b792-9e514aaa0572'\n    }\n\n    const supabase = createServerSupabaseClient()\n\n    // 기존 데모 사용자 확인\n    const { data: existingUsers } = await supabase\n      .from('users')\n      .select('id')\n      .eq('email', 'demo@talksign.app')\n      .limit(1)\n\n    if (existingUsers && existingUsers.length > 0) {\n      console.log('Using existing demo user:', existingUsers[0].id)\n      return existingUsers[0].id\n    }\n\n    // 데모 사용자 생성\n    const demoUserData = {\n      id: '80d20e48-7189-4874-b792-9e514aaa0572', // 고정 UUID\n      email: 'demo@talksign.app',\n      name: '데모 사용자',\n      phone: '010-1234-5678',\n      company_name: '데모 회사',\n      business_name: '데모 비즈니스',\n      business_registration_number: '123-45-67890',\n      created_at: new Date().toISOString(),\n      updated_at: new Date().toISOString()\n    }\n\n    const { data: newUser, error } = await supabase\n      .from('users')\n      .upsert(demoUserData, { onConflict: 'id' })\n      .select('id')\n      .single()\n\n    if (error) {\n      console.error('Failed to create demo user:', error)\n      // 실패해도 고정 ID 반환\n      return '80d20e48-7189-4874-b792-9e514aaa0572'\n    }\n\n    console.log('Created demo user:', newUser.id)\n    return newUser.id\n\n  } catch (error) {\n    console.error('Error in getOrCreateDemoUser:', error)\n    // 모든 것이 실패해도 고정 ID 반환\n    return '80d20e48-7189-4874-b792-9e514aaa0572'\n  }\n}\n\n// RLS가 적용된 Supabase 클라이언트 생성 (사용자 토큰 사용)\nexport function createUserSupabaseClient(request: NextRequest) {\n  const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL\n  const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY\n\n  if (!supabaseUrl) {\n    throw new Error('Missing NEXT_PUBLIC_SUPABASE_URL environment variable')\n  }\n\n  if (!supabaseAnonKey) {\n    throw new Error('Missing Supabase anon key')\n  }\n\n  // Authorization 헤더에서 토큰 추출\n  const authHeader = request.headers.get('authorization')\n  const token = authHeader?.replace('Bearer ', '')\n\n  const client = createClient<Database>(supabaseUrl, supabaseAnonKey, {\n    auth: {\n      autoRefreshToken: false,\n      persistSession: false\n    },\n    global: {\n      headers: token ? {\n        Authorization: `Bearer ${token}`\n      } : {}\n    }\n  })\n\n  return client\n}\n\n// 서버 사이드에서 사용할 Supabase 클라이언트 생성 (service role key 사용)\nexport function createServerSupabaseClient() {\n  const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL\n  const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY\n\n  if (!supabaseUrl) {\n    throw new Error('Missing NEXT_PUBLIC_SUPABASE_URL environment variable')\n  }\n\n  if (!supabaseServiceKey) {\n    throw new Error('Missing Supabase service role key')\n  }\n\n  const client = createClient<Database>(supabaseUrl, supabaseServiceKey, {\n    auth: {\n      autoRefreshToken: false,\n      persistSession: false\n    }\n  })\n\n  return client\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 292, "column": 0}, "map": {"version":3,"sources":["file:///Users/gwon-oseo/Talksign/apps/app/src/lib/supabase.ts"],"sourcesContent":["import { createClient } from '@supabase/supabase-js'\n\n// 환경 변수에서 Supabase 설정 가져오기\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL\nconst supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY\nconst supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY\n\n// 필수 환경 변수 검증\nif (!supabaseUrl) {\n  throw new Error('Missing NEXT_PUBLIC_SUPABASE_URL environment variable')\n}\n\nif (!supabaseAnonKey) {\n  throw new Error('Missing NEXT_PUBLIC_SUPABASE_ANON_KEY environment variable')\n}\n\nif (!supabaseServiceKey) {\n  console.warn('Missing SUPABASE_SERVICE_ROLE_KEY - using anon key for service operations')\n}\n\n// Supabase 클라이언트 생성\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey)\n\n// 서버 사이드에서 사용할 클라이언트 (Service Role Key 사용)\nexport const supabaseAdmin = createClient(\n  supabaseUrl,\n  supabaseServiceKey || supabaseAnonKey,\n  {\n    auth: {\n      autoRefreshToken: false,\n      persistSession: false\n    }\n  }\n)\n\n// 서버 API 호출을 위한 기본 URL\nexport const API_BASE_URL = `${supabaseUrl}/functions/v1/make-server-e83d4894`\n\n// API 요청 헬퍼 함수\nexport async function apiRequest(endpoint: string, options: RequestInit = {}) {\n  const url = `${API_BASE_URL}${endpoint}`\n  \n  const defaultHeaders: Record<string, string> = {\n    'Content-Type': 'application/json',\n  }\n\n  // 현재 세션에서 액세스 토큰 가져오기\n  const { data: { session } } = await supabase.auth.getSession()\n  if (session?.access_token) {\n    defaultHeaders['Authorization'] = `Bearer ${session.access_token}`\n  }\n\n  const response = await fetch(url, {\n    ...options,\n    headers: {\n      ...defaultHeaders,\n      ...options.headers,\n    },\n  })\n\n  if (!response.ok) {\n    const errorData = await response.json().catch(() => ({}))\n    throw new Error(errorData.error || `HTTP error! status: ${response.status}`)\n  }\n\n  return response.json()\n}\n\n// Enhanced type definitions based on database schema\nexport type UserRole = 'freelancer' | 'client' | 'admin'\nexport type QuoteStatus = 'draft' | 'sent' | 'approved' | 'rejected' | 'expired'\nexport type ContractStatus = 'draft' | 'sent' | 'completed'\nexport type PaymentStatus = 'pending' | 'processing' | 'completed' | 'failed' | 'refunded'\n\nexport interface QuoteItem {\n  id: string\n  description: string\n  quantity: number\n  unit_price: number\n  total: number\n}\n\nexport interface DigitalSignature {\n  signature_data: string\n  signed_by: string\n  signed_at: string\n  ip_address?: string\n}\n\nexport interface NotificationChannel {\n  type: 'in_app' | 'email' | 'kakao_talk'\n  enabled: boolean\n}\n\nexport type Database = {\n  public: {\n    Tables: {\n      users: {\n        Row: {\n          id: string\n          email: string\n          name: string\n          phone?: string\n          role: UserRole\n          business_name?: string\n          business_number?: string\n          business_address?: string\n          avatar_url?: string\n          timezone: string\n          created_at: string\n          updated_at: string\n        }\n        Insert: {\n          id: string\n          email: string\n          name: string\n          phone?: string\n          role?: UserRole\n          business_name?: string\n          business_number?: string\n          business_address?: string\n          avatar_url?: string\n          timezone?: string\n          created_at?: string\n          updated_at?: string\n        }\n        Update: {\n          email?: string\n          name?: string\n          phone?: string\n          role?: UserRole\n          business_name?: string\n          business_number?: string\n          business_address?: string\n          avatar_url?: string\n          timezone?: string\n          updated_at?: string\n        }\n      }\n      quotes: {\n        Row: {\n          id: string\n          user_id: string\n          client_name: string\n          client_email: string\n          client_phone?: string\n          client_company?: string\n          title: string\n          description?: string\n          items: QuoteItem[]\n          subtotal: number\n          tax_rate: number\n          tax_amount: number\n          total_amount: number\n          status: QuoteStatus\n          expires_at?: string\n          approved_at?: string\n          created_at: string\n          updated_at: string\n        }\n        Insert: {\n          id?: string\n          user_id: string\n          client_name: string\n          client_email: string\n          client_phone?: string\n          client_company?: string\n          title: string\n          description?: string\n          items: QuoteItem[]\n          subtotal: number\n          tax_rate?: number\n          status?: QuoteStatus\n          expires_at?: string\n          created_at?: string\n          updated_at?: string\n        }\n        Update: {\n          client_name?: string\n          client_email?: string\n          client_phone?: string\n          client_company?: string\n          title?: string\n          description?: string\n          items?: QuoteItem[]\n          subtotal?: number\n          tax_rate?: number\n          status?: QuoteStatus\n          expires_at?: string\n          approved_at?: string\n          updated_at?: string\n        }\n      }\n      contracts: {\n        Row: {\n          id: string\n          quote_id: string\n          user_id: string\n          title: string\n          content: string\n          terms_and_conditions?: string\n          attachments: unknown[]\n          client_signature?: DigitalSignature\n          freelancer_signature?: DigitalSignature\n          signed_at?: string\n          status: ContractStatus\n          created_at: string\n          updated_at: string\n        }\n        Insert: {\n          id?: string\n          quote_id: string\n          user_id: string\n          title: string\n          content: string\n          terms_and_conditions?: string\n          attachments?: unknown[]\n          client_signature?: DigitalSignature\n          freelancer_signature?: DigitalSignature\n          signed_at?: string\n          status?: ContractStatus\n          created_at?: string\n          updated_at?: string\n        }\n        Update: {\n          title?: string\n          content?: string\n          terms_and_conditions?: string\n          attachments?: unknown[]\n          client_signature?: DigitalSignature\n          freelancer_signature?: DigitalSignature\n          signed_at?: string\n          status?: ContractStatus\n          updated_at?: string\n        }\n      }\n      payments: {\n        Row: {\n          id: string\n          contract_id: string\n          user_id: string\n          amount: number\n          currency: string\n          payment_method?: string\n          pg_provider?: string\n          transaction_id?: string\n          pg_transaction_id?: string\n          status: PaymentStatus\n          paid_at?: string\n          receipt_url?: string\n          tax_invoice_url?: string\n          created_at: string\n          updated_at: string\n        }\n        Insert: {\n          id?: string\n          contract_id: string\n          user_id: string\n          amount: number\n          currency?: string\n          payment_method?: string\n          pg_provider?: string\n          transaction_id?: string\n          pg_transaction_id?: string\n          status?: PaymentStatus\n          paid_at?: string\n          receipt_url?: string\n          tax_invoice_url?: string\n          created_at?: string\n          updated_at?: string\n        }\n        Update: {\n          payment_method?: string\n          pg_provider?: string\n          transaction_id?: string\n          pg_transaction_id?: string\n          status?: PaymentStatus\n          paid_at?: string\n          receipt_url?: string\n          tax_invoice_url?: string\n          updated_at?: string\n        }\n      }\n      notifications: {\n        Row: {\n          id: string\n          user_id: string\n          type: string\n          title: string\n          message: string\n          quote_id?: string\n          contract_id?: string\n          payment_id?: string\n          channels: NotificationChannel[]\n          sent_at?: string\n          read_at?: string\n          kakao_template_id?: string\n          kakao_message_id?: string\n          created_at: string\n        }\n        Insert: {\n          id?: string\n          user_id: string\n          type: string\n          title: string\n          message: string\n          quote_id?: string\n          contract_id?: string\n          payment_id?: string\n          channels?: NotificationChannel[]\n          sent_at?: string\n          kakao_template_id?: string\n          kakao_message_id?: string\n          created_at?: string\n        }\n        Update: {\n          sent_at?: string\n          read_at?: string\n          kakao_message_id?: string\n        }\n      }\n      recurring_payments: {\n        Row: {\n          id: string\n          user_id: string\n          contract_id?: string\n          amount: number\n          currency: string\n          interval_type: string\n          interval_count: number\n          start_date: string\n          end_date?: string\n          next_payment_date?: string\n          is_active: boolean\n          created_at: string\n          updated_at: string\n        }\n        Insert: {\n          id?: string\n          user_id: string\n          contract_id?: string\n          amount: number\n          currency?: string\n          interval_type: string\n          interval_count?: number\n          start_date: string\n          end_date?: string\n          next_payment_date?: string\n          is_active?: boolean\n          created_at?: string\n          updated_at?: string\n        }\n        Update: {\n          amount?: number\n          currency?: string\n          interval_type?: string\n          interval_count?: number\n          start_date?: string\n          end_date?: string\n          next_payment_date?: string\n          is_active?: boolean\n          updated_at?: string\n        }\n      }\n      access_tokens: {\n        Row: {\n          id: string\n          token: string\n          entity_type: string\n          entity_id: string\n          expires_at: string\n          used_at?: string\n          created_at: string\n        }\n        Insert: {\n          id?: string\n          token: string\n          entity_type: string\n          entity_id: string\n          expires_at: string\n          used_at?: string\n          created_at?: string\n        }\n        Update: {\n          used_at?: string\n        }\n      }\n      customers: {\n        Row: {\n          id: string\n          user_id: string\n          company_name: string\n          representative_name: string\n          contact_person?: string\n          business_registration_number?: string\n          email: string\n          phone: string\n          address?: string\n          created_at: string\n          updated_at: string\n        }\n        Insert: {\n          id?: string\n          user_id: string\n          company_name: string\n          representative_name: string\n          contact_person?: string\n          business_registration_number?: string\n          email: string\n          phone: string\n          address?: string\n          created_at?: string\n          updated_at?: string\n        }\n        Update: {\n          company_name?: string\n          representative_name?: string\n          contact_person?: string\n          business_registration_number?: string\n          email?: string\n          phone?: string\n          address?: string\n          updated_at?: string\n        }\n      }\n    }\n  }\n}\n"],"names":[],"mappings":";;;;;;AAAA;;AAEA,2BAA2B;AAC3B,MAAM;AACN,MAAM;AACN,MAAM,qBAAqB,QAAQ,GAAG,CAAC,yBAAyB;AAEhE,cAAc;AACd;;AAIA;;AAIA,IAAI,CAAC,oBAAoB;IACvB,QAAQ,IAAI,CAAC;AACf;AAGO,MAAM,WAAW,CAAA,GAAA,yLAAA,CAAA,eAAY,AAAD,EAAE,aAAa;AAG3C,MAAM,gBAAgB,CAAA,GAAA,yLAAA,CAAA,eAAY,AAAD,EACtC,aACA,sBAAsB,iBACtB;IACE,MAAM;QACJ,kBAAkB;QAClB,gBAAgB;IAClB;AACF;AAIK,MAAM,eAAe,GAAG,YAAY,kCAAkC,CAAC;AAGvE,eAAe,WAAW,QAAgB,EAAE,UAAuB,CAAC,CAAC;IAC1E,MAAM,MAAM,GAAG,eAAe,UAAU;IAExC,MAAM,iBAAyC;QAC7C,gBAAgB;IAClB;IAEA,sBAAsB;IACtB,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,EAAE,GAAG,MAAM,SAAS,IAAI,CAAC,UAAU;IAC5D,IAAI,SAAS,cAAc;QACzB,cAAc,CAAC,gBAAgB,GAAG,CAAC,OAAO,EAAE,QAAQ,YAAY,EAAE;IACpE;IAEA,MAAM,WAAW,MAAM,MAAM,KAAK;QAChC,GAAG,OAAO;QACV,SAAS;YACP,GAAG,cAAc;YACjB,GAAG,QAAQ,OAAO;QACpB;IACF;IAEA,IAAI,CAAC,SAAS,EAAE,EAAE;QAChB,MAAM,YAAY,MAAM,SAAS,IAAI,GAAG,KAAK,CAAC,IAAM,CAAC,CAAC,CAAC;QACvD,MAAM,IAAI,MAAM,UAAU,KAAK,IAAI,CAAC,oBAAoB,EAAE,SAAS,MAAM,EAAE;IAC7E;IAEA,OAAO,SAAS,IAAI;AACtB","debugId":null}},
    {"offset": {"line": 347, "column": 0}, "map": {"version":3,"sources":["file:///Users/gwon-oseo/Talksign/apps/app/src/app/api/quotes/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server'\nimport { createUserSupabaseClient, getUserFromRequest, createServerSupabaseClient } from '@/lib/auth-utils'\nimport { supabaseAdmin } from '@/lib/supabase'\nimport { createClient } from '@supabase/supabase-js'\nimport type { Database } from '@/lib/supabase'\n\ntype QuoteInsert = Database['public']['Tables']['quotes']['Insert']\n\nexport async function GET(request: NextRequest) {\n  try {\n    console.log('API Route: GET /api/quotes called')\n    // 사용자 인증 확인\n    const userId = await getUserFromRequest(request)\n    if (!userId) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })\n    }\n    \n    console.log('Fetching quotes for user:', userId)\n\n    // 사용자별 클라이언트로 견적서 조회 (RLS 적용)\n    const supabase = createUserSupabaseClient(request)\n\n    const { data: quotes, error } = await supabase\n      .from('quotes')\n      .select('*')\n      .eq('user_id', userId)\n      .order('created_at', { ascending: false })\n\n    if (error) {\n      console.error('Error fetching quotes:', error)\n      // Supabase 에러 시 빈 배열 반환 (RLS 정책으로 인한 접근 제한일 수 있음)\n      console.log('Returning empty array due to database error')\n      return NextResponse.json([])\n    }\n\n    console.log('Raw quotes from database:', JSON.stringify(quotes, null, 2))\n    console.log('Number of quotes found:', quotes?.length || 0)\n\n    // 견적서가 없으면 빈 배열 반환 (정상적인 상황)\n    return NextResponse.json(quotes || [])\n  } catch (error) {\n    console.error('Error in GET /api/quotes:', error)\n    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    console.log('API Route: POST /api/quotes called')\n    \n    // 사용자 인증 확인 - 개발 환경에서는 현재 사용자 사용\n    const userId = await getUserFromRequest(request)\n    if (!userId) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })\n    }\n    \n    console.log('Creating quote for user:', userId)\n\n    // 사용자별 클라이언트로 견적서 생성 (RLS 적용)\n    const supabase = createUserSupabaseClient(request)\n    console.log('Supabase client created')\n    \n    const body = await request.json()\n    console.log('Request body:', JSON.stringify(body, null, 2))\n    \n    // 필수 필드 검증\n    if (!body.client_name || !body.client_email || !body.title) {\n      console.log('Missing required fields')\n      return NextResponse.json(\n        { error: 'Missing required fields: client_name, client_email, title' },\n        { status: 400 }\n      )\n    }\n\n    // 견적서 항목 총합 계산\n    const items = body.items || []\n    const subtotal = items.reduce((sum: number, item: { amount?: number }) => sum + (item.amount || 0), 0)\n    console.log('Calculated subtotal:', subtotal)\n\n    // 세금 계산 (기본 10%) - tax_amount와 total_amount는 데이터베이스에서 자동 계산됨\n    const taxRate = body.tax_rate || 10.0\n    console.log('Tax rate:', taxRate, 'Subtotal:', subtotal)\n\n    // 공급자 정보로 사용자 프로필 업데이트 (필요시)\n    if (body.supplier_info) {\n      const { error: updateError } = await supabase\n        .from('users')\n        .update({\n          name: body.supplier_info.name,\n          phone: body.supplier_info.phone,\n          business_registration_number: body.supplier_info.business_registration_number,\n          company_name: body.supplier_info.company_name,\n          business_name: body.supplier_info.business_name,\n          updated_at: new Date().toISOString()\n        })\n        .eq('id', userId)\n\n      if (updateError) {\n        console.warn('Failed to update user profile:', updateError)\n        // 사용자 프로필 업데이트 실패는 치명적이지 않으므로 계속 진행\n      }\n    }\n\n    // 견적서 생성\n    const expiresAt = body.valid_until ? new Date(body.valid_until).toISOString() : (body.expires_at ? new Date(body.expires_at).toISOString() : null)\n    \n    const quoteData: any = {\n      user_id: userId,\n      client_name: body.client_name,\n      client_email: body.client_email,\n      client_phone: body.client_phone || null,\n      client_company: body.client_company || null,\n      title: body.title,\n      description: body.description || null,\n      items: items,\n      subtotal: subtotal,\n      tax_rate: taxRate,\n      status: body.status || 'draft',\n      expires_at: expiresAt,\n      client_business_number: body.client_business_number || null,\n      client_address: body.client_address || null,\n    }\n    \n    console.log('Quote data to insert:', JSON.stringify(quoteData, null, 2))\n\n    // RLS 정책을 우회하기 위해 supabaseAdmin 사용 시도\n    let quote, error\n    try {\n      if (process.env.NODE_ENV === 'development' && process.env.SUPABASE_SERVICE_ROLE_KEY) {\n        ({ data: quote, error } = await supabaseAdmin.from('quotes').insert(quoteData).select().single())\n      } else {\n        // 개발 환경에서 service role key가 없을 때는 anon client로 시도\n        // 실제 production에서는 이 방법을 사용하면 안됨\n        console.log('Warning: Using anon key for quote creation due to missing service role key')\n        const anonSupabase = createClient(\n          process.env.NEXT_PUBLIC_SUPABASE_URL!,\n          process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n        );\n        ({ data: quote, error } = await anonSupabase.from('quotes').insert(quoteData).select().single())\n      }\n    } catch (insertError) {\n      console.error('Insert operation failed:', insertError)\n      error = insertError\n    }\n\n    if (error) {\n      console.error('Failed to create quote:', error)\n      return NextResponse.json({ \n        error: 'Failed to create quote', \n        details: error.message,\n        code: error.code \n      }, { status: 500 })\n    }\n\n    console.log('Quote created successfully:', quote)\n    return NextResponse.json(quote, { status: 201 })\n    \n  } catch (error) {\n    console.error('Unexpected error in POST /api/quotes:', error)\n    return NextResponse.json({ \n      error: 'Internal server error',\n      details: error instanceof Error ? error.message : 'Unknown error'\n    }, { status: 500 })\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}
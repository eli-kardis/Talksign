{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 114, "column": 0}, "map": {"version":3,"sources":["file:///Users/gwon-oseo/Talksign/apps/app/src/lib/auth-utils.ts"],"sourcesContent":["import { NextRequest } from 'next/server'\nimport { createClient } from '@supabase/supabase-js'\nimport { jwtVerify, createRemoteJWKSet } from 'jose'\nimport type { Database } from './supabase'\n\n// 서버 사이드에서 인증된 Supabase 클라이언트 생성\nexport function createAuthenticatedSupabaseClient(request: NextRequest) {\n  const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL\n  const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY\n\n  if (!supabaseUrl) {\n    throw new Error('Missing NEXT_PUBLIC_SUPABASE_URL environment variable')\n  }\n\n  if (!supabaseServiceKey) {\n    throw new Error('Missing Supabase service role key')\n  }\n\n  // Authorization 헤더에서 토큰 추출\n  const authHeader = request.headers.get('authorization')\n  const token = authHeader?.replace('Bearer ', '')\n\n  const client = createClient<Database>(supabaseUrl, supabaseServiceKey, {\n    auth: {\n      autoRefreshToken: false,\n      persistSession: false\n    },\n    global: {\n      headers: token ? {\n        Authorization: `Bearer ${token}`\n      } : {}\n    }\n  })\n\n  return client\n}\n\n// JWT 토큰 검증 함수\nasync function verifySupabaseJWT(token: string): Promise<string | null> {\n  try {\n    const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL\n    if (!supabaseUrl) {\n      console.error('Missing NEXT_PUBLIC_SUPABASE_URL for JWT verification')\n      return null\n    }\n\n    // Supabase JWT 검증을 위한 JWKS URL\n    const jwksUrl = new URL(`${supabaseUrl}/rest/v1/jwks`)\n    const JWKS = createRemoteJWKSet(jwksUrl)\n\n    // JWT 검증\n    const { payload } = await jwtVerify(token, JWKS, {\n      issuer: 'supabase',\n      audience: 'authenticated',\n    })\n\n    // 사용자 ID 반환\n    return payload.sub || null\n  } catch (error) {\n    console.log('JWT verification failed:', error)\n    return null\n  }\n}\n\n// 사용자 인증 확인 및 user_id 반환\nexport async function getUserFromRequest(request: NextRequest): Promise<string | null> {\n  try {\n    console.log('Getting user from request, NODE_ENV:', process.env.NODE_ENV)\n\n    // 인증 토큰 확인 시도\n    const authHeader = request.headers.get('authorization')\n    const token = authHeader?.replace('Bearer ', '')\n\n    if (token) {\n      console.log('Token found, attempting validation...')\n\n      try {\n        // JWT 토큰 검증 (보안 강화)\n        const userId = await verifySupabaseJWT(token)\n\n        if (userId && userId !== 'undefined') {\n          console.log('Valid authenticated user from token:', userId)\n\n          // 사용자 존재 확인 (선택적)\n          const supabase = createServerSupabaseClient()\n          const { data: user } = await supabase\n            .from('users')\n            .select('id')\n            .eq('id', userId)\n            .single()\n\n          if (user) {\n            console.log('User exists in database:', user.id)\n            return user.id\n          } else {\n            console.log('User not found in database, creating demo user')\n          }\n        }\n      } catch (tokenError) {\n        console.log('Token verification failed:', tokenError)\n      }\n    } else {\n      console.log('No authorization token found')\n    }\n\n    // 토큰이 없거나 검증 실패 시 데모 사용자 생성/반환\n    console.log('Falling back to demo user')\n    return await getOrCreateDemoUser()\n\n  } catch (error) {\n    console.error('Error getting user from request:', error)\n    // 에러 발생 시에도 데모 사용자 반환\n    return await getOrCreateDemoUser()\n  }\n}\n\n// 데모 사용자 생성 또는 기존 사용자 반환\nasync function getOrCreateDemoUser(): Promise<string> {\n  try {\n    // service role key가 없으면 고정 데모 사용자 ID만 반환\n    if (!process.env.SUPABASE_SERVICE_ROLE_KEY) {\n      console.log('No service role key available, using hardcoded demo user ID')\n      return '80d20e48-7189-4874-b792-9e514aaa0572'\n    }\n\n    const supabase = createServerSupabaseClient()\n\n    // 기존 데모 사용자 확인\n    const { data: existingUsers } = await supabase\n      .from('users')\n      .select('id')\n      .eq('email', 'demo@talksign.app')\n      .limit(1)\n\n    if (existingUsers && existingUsers.length > 0) {\n      console.log('Using existing demo user:', existingUsers[0].id)\n      return existingUsers[0].id\n    }\n\n    // 데모 사용자 생성\n    const demoUserData = {\n      id: '80d20e48-7189-4874-b792-9e514aaa0572', // 고정 UUID\n      email: 'demo@talksign.app',\n      name: '데모 사용자',\n      phone: '010-1234-5678',\n      company_name: '데모 회사',\n      business_name: '데모 비즈니스',\n      business_registration_number: '123-45-67890',\n      created_at: new Date().toISOString(),\n      updated_at: new Date().toISOString()\n    }\n\n    const { data: newUser, error } = await supabase\n      .from('users')\n      .upsert(demoUserData, { onConflict: 'id' })\n      .select('id')\n      .single()\n\n    if (error) {\n      console.error('Failed to create demo user:', error)\n      // 실패해도 고정 ID 반환\n      return '80d20e48-7189-4874-b792-9e514aaa0572'\n    }\n\n    console.log('Created demo user:', newUser.id)\n    return newUser.id\n\n  } catch (error) {\n    console.error('Error in getOrCreateDemoUser:', error)\n    // 모든 것이 실패해도 고정 ID 반환\n    return '80d20e48-7189-4874-b792-9e514aaa0572'\n  }\n}\n\n// RLS가 적용된 Supabase 클라이언트 생성 (사용자 토큰 사용)\nexport function createUserSupabaseClient(request: NextRequest) {\n  const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL\n  const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY\n\n  if (!supabaseUrl) {\n    throw new Error('Missing NEXT_PUBLIC_SUPABASE_URL environment variable')\n  }\n\n  if (!supabaseAnonKey) {\n    throw new Error('Missing Supabase anon key')\n  }\n\n  // Authorization 헤더에서 토큰 추출\n  const authHeader = request.headers.get('authorization')\n  const token = authHeader?.replace('Bearer ', '')\n\n  const client = createClient<Database>(supabaseUrl, supabaseAnonKey, {\n    auth: {\n      autoRefreshToken: false,\n      persistSession: false\n    },\n    global: {\n      headers: token ? {\n        Authorization: `Bearer ${token}`\n      } : {}\n    }\n  })\n\n  return client\n}\n\n// 서버 사이드에서 사용할 Supabase 클라이언트 생성 (service role key 사용)\nexport function createServerSupabaseClient() {\n  const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL\n  const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY\n\n  if (!supabaseUrl) {\n    throw new Error('Missing NEXT_PUBLIC_SUPABASE_URL environment variable')\n  }\n\n  if (!supabaseServiceKey) {\n    throw new Error('Missing Supabase service role key')\n  }\n\n  const client = createClient<Database>(supabaseUrl, supabaseServiceKey, {\n    auth: {\n      autoRefreshToken: false,\n      persistSession: false\n    }\n  })\n\n  return client\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 292, "column": 0}, "map": {"version":3,"sources":["file:///Users/gwon-oseo/Talksign/apps/app/src/lib/mockData.ts"],"sourcesContent":["// Mock 데이터 관리용 모듈\n// 실제 환경에서는 데이터베이스를 사용하지만, 개발 중에는 localStorage 기반 mock 데이터 사용\n\nexport interface Customer {\n  id: string;\n  company_name: string;\n  representative_name: string;\n  contact_person: string | null;\n  business_registration_number: string | null;\n  email: string;\n  phone: string;\n  address: string | null;\n  created_at: string;\n  updated_at: string;\n}\n\n// localStorage key\nconst CUSTOMERS_STORAGE_KEY = 'talksign_customers';\n\n// localStorage 헬퍼 함수들\nconst loadCustomersFromStorage = (): Customer[] => {\n  if (typeof window === 'undefined') return defaultCustomers; // 서버사이드에서는 기본 데이터 반환\n\n  try {\n    const stored = localStorage.getItem(CUSTOMERS_STORAGE_KEY);\n    if (stored) {\n      const parsedCustomers = JSON.parse(stored);\n      // localStorage에 저장된 고객과 기본 고객을 병합 (중복 제거)\n      const existingIds = new Set(parsedCustomers.map((c: Customer) => c.id));\n      const uniqueDefaults = defaultCustomers.filter(c => !existingIds.has(c.id));\n      return [...parsedCustomers, ...uniqueDefaults];\n    }\n  } catch (error) {\n    console.warn('Failed to load customers from localStorage:', error);\n  }\n  return defaultCustomers;\n};\n\nconst saveCustomersToStorage = (customers: Customer[]) => {\n  if (typeof window === 'undefined') return; // 서버사이드에서는 실행하지 않음\n\n  try {\n    localStorage.setItem(CUSTOMERS_STORAGE_KEY, JSON.stringify(customers));\n  } catch (error) {\n    console.warn('Failed to save customers to localStorage:', error);\n  }\n};\n\n// 기본 Mock 데이터\nconst defaultCustomers: Customer[] = [\n  {\n    id: '550e8400-e29b-41d4-a716-446655440001',\n    company_name: '(주)스타트업에이',\n    representative_name: '김사장',\n    contact_person: '이담당',\n    business_registration_number: '123-45-67890',\n    email: 'contact@startup-a.com',\n    phone: '02-1234-5678',\n    address: '서울시 강남구 테헤란로 123, 스타트업타워 5층',\n    created_at: '2024-01-15T09:00:00Z',\n    updated_at: '2024-01-15T09:00:00Z'\n  },\n  {\n    id: '550e8400-e29b-41d4-a716-446655440002',\n    company_name: '테크솔루션즈',\n    representative_name: '박대표',\n    contact_person: '최매니저',\n    business_registration_number: '234-56-78901',\n    email: 'info@techsolutions.com',\n    phone: '02-9876-5432',\n    address: '서울시 서초구 강남대로 456, 테크빌딩 10층',\n    created_at: '2024-02-01T10:30:00Z',\n    updated_at: '2024-02-01T10:30:00Z'\n  },\n  {\n    id: '550e8400-e29b-41d4-a716-446655440003',\n    company_name: '디자인스튜디오',\n    representative_name: '정실장',\n    contact_person: null,\n    business_registration_number: null,\n    email: 'hello@designstudio.co.kr',\n    phone: '010-1111-2222',\n    address: '서울시 마포구 홍대입구로 789, 크리에이티브센터 3층',\n    created_at: '2024-02-10T14:15:00Z',\n    updated_at: '2024-02-10T14:15:00Z'\n  },\n  {\n    id: '550e8400-e29b-41d4-a716-446655440004',\n    company_name: '글로벌인더스트리',\n    representative_name: '송회장',\n    contact_person: '윤과장',\n    business_registration_number: '345-67-89012',\n    email: 'business@global-industry.com',\n    phone: '02-5555-6666',\n    address: '부산시 해운대구 센텀중앙로 100, 글로벌타워 20층',\n    created_at: '2024-02-15T16:45:00Z',\n    updated_at: '2024-02-15T16:45:00Z'\n  },\n  {\n    id: '550e8400-e29b-41d4-a716-446655440005',\n    company_name: '스마트솔루션',\n    representative_name: '한이사',\n    contact_person: '신차장',\n    business_registration_number: '456-78-90123',\n    email: 'contact@smart-sol.kr',\n    phone: '031-7777-8888',\n    address: '경기도 성남시 분당구 판교로 200, 스마트빌딩 7층',\n    created_at: '2024-02-20T11:20:00Z',\n    updated_at: '2024-02-20T11:20:00Z'\n  }\n];\n\n// 고객 데이터를 메모리와 localStorage에서 가져오기\nconst getCustomers = (): Customer[] => {\n  return loadCustomersFromStorage();\n};\n\nlet mockCustomers: Customer[] = getCustomers();\n\n// Mock 데이터 조작 함수들\nexport const MockCustomerService = {\n  // 모든 고객 조회\n  getAll(): Customer[] {\n    mockCustomers = getCustomers(); // localStorage에서 최신 데이터 로드\n    return [...mockCustomers].sort((a, b) =>\n      new Date(b.created_at).getTime() - new Date(a.created_at).getTime()\n    );\n  },\n\n  // ID로 고객 조회\n  getById(id: string): Customer | undefined {\n    mockCustomers = getCustomers(); // localStorage에서 최신 데이터 로드\n    return mockCustomers.find(customer => customer.id === id);\n  },\n\n  // 새 고객 추가\n  create(customerData: Omit<Customer, 'id' | 'created_at' | 'updated_at'>): Customer {\n    mockCustomers = getCustomers(); // localStorage에서 최신 데이터 로드\n    const newCustomer: Customer = {\n      ...customerData,\n      id: `550e8400-e29b-41d4-a716-${Date.now()}`,\n      created_at: new Date().toISOString(),\n      updated_at: new Date().toISOString()\n    };\n    mockCustomers.unshift(newCustomer);\n    saveCustomersToStorage(mockCustomers); // localStorage에 저장\n    return newCustomer;\n  },\n\n  // 고객 정보 업데이트\n  update(id: string, customerData: Partial<Omit<Customer, 'id' | 'created_at'>>): Customer | null {\n    mockCustomers = getCustomers(); // localStorage에서 최신 데이터 로드\n    const customerIndex = mockCustomers.findIndex(customer => customer.id === id);\n    if (customerIndex === -1) {\n      return null;\n    }\n\n    const updatedCustomer: Customer = {\n      ...mockCustomers[customerIndex],\n      ...customerData,\n      updated_at: new Date().toISOString()\n    };\n\n    mockCustomers[customerIndex] = updatedCustomer;\n    saveCustomersToStorage(mockCustomers); // localStorage에 저장\n    return updatedCustomer;\n  },\n\n  // 고객 삭제\n  delete(ids: string[]): number {\n    mockCustomers = getCustomers(); // localStorage에서 최신 데이터 로드\n    const initialLength = mockCustomers.length;\n    mockCustomers = mockCustomers.filter(customer => !ids.includes(customer.id));\n    saveCustomersToStorage(mockCustomers); // localStorage에 저장\n    return initialLength - mockCustomers.length;\n  }\n};"],"names":[],"mappings":"AAAA,kBAAkB;AAClB,6DAA6D;;;;AAe7D,mBAAmB;AACnB,MAAM,wBAAwB;AAE9B,sBAAsB;AACtB,MAAM,2BAA2B;IAC/B,wCAAmC,OAAO,kBAAkB,qBAAqB;;;AAenF;AAEA,MAAM,yBAAyB,CAAC;IAC9B,wCAAmC,QAAQ,mBAAmB;;;AAOhE;AAEA,cAAc;AACd,MAAM,mBAA+B;IACnC;QACE,IAAI;QACJ,cAAc;QACd,qBAAqB;QACrB,gBAAgB;QAChB,8BAA8B;QAC9B,OAAO;QACP,OAAO;QACP,SAAS;QACT,YAAY;QACZ,YAAY;IACd;IACA;QACE,IAAI;QACJ,cAAc;QACd,qBAAqB;QACrB,gBAAgB;QAChB,8BAA8B;QAC9B,OAAO;QACP,OAAO;QACP,SAAS;QACT,YAAY;QACZ,YAAY;IACd;IACA;QACE,IAAI;QACJ,cAAc;QACd,qBAAqB;QACrB,gBAAgB;QAChB,8BAA8B;QAC9B,OAAO;QACP,OAAO;QACP,SAAS;QACT,YAAY;QACZ,YAAY;IACd;IACA;QACE,IAAI;QACJ,cAAc;QACd,qBAAqB;QACrB,gBAAgB;QAChB,8BAA8B;QAC9B,OAAO;QACP,OAAO;QACP,SAAS;QACT,YAAY;QACZ,YAAY;IACd;IACA;QACE,IAAI;QACJ,cAAc;QACd,qBAAqB;QACrB,gBAAgB;QAChB,8BAA8B;QAC9B,OAAO;QACP,OAAO;QACP,SAAS;QACT,YAAY;QACZ,YAAY;IACd;CACD;AAED,mCAAmC;AACnC,MAAM,eAAe;IACnB,OAAO;AACT;AAEA,IAAI,gBAA4B;AAGzB,MAAM,sBAAsB;IACjC,WAAW;IACX;QACE,gBAAgB,gBAAgB,2BAA2B;QAC3D,OAAO;eAAI;SAAc,CAAC,IAAI,CAAC,CAAC,GAAG,IACjC,IAAI,KAAK,EAAE,UAAU,EAAE,OAAO,KAAK,IAAI,KAAK,EAAE,UAAU,EAAE,OAAO;IAErE;IAEA,YAAY;IACZ,SAAQ,EAAU;QAChB,gBAAgB,gBAAgB,2BAA2B;QAC3D,OAAO,cAAc,IAAI,CAAC,CAAA,WAAY,SAAS,EAAE,KAAK;IACxD;IAEA,UAAU;IACV,QAAO,YAAgE;QACrE,gBAAgB,gBAAgB,2BAA2B;QAC3D,MAAM,cAAwB;YAC5B,GAAG,YAAY;YACf,IAAI,CAAC,wBAAwB,EAAE,KAAK,GAAG,IAAI;YAC3C,YAAY,IAAI,OAAO,WAAW;YAClC,YAAY,IAAI,OAAO,WAAW;QACpC;QACA,cAAc,OAAO,CAAC;QACtB,uBAAuB,gBAAgB,mBAAmB;QAC1D,OAAO;IACT;IAEA,aAAa;IACb,QAAO,EAAU,EAAE,YAA0D;QAC3E,gBAAgB,gBAAgB,2BAA2B;QAC3D,MAAM,gBAAgB,cAAc,SAAS,CAAC,CAAA,WAAY,SAAS,EAAE,KAAK;QAC1E,IAAI,kBAAkB,CAAC,GAAG;YACxB,OAAO;QACT;QAEA,MAAM,kBAA4B;YAChC,GAAG,aAAa,CAAC,cAAc;YAC/B,GAAG,YAAY;YACf,YAAY,IAAI,OAAO,WAAW;QACpC;QAEA,aAAa,CAAC,cAAc,GAAG;QAC/B,uBAAuB,gBAAgB,mBAAmB;QAC1D,OAAO;IACT;IAEA,QAAQ;IACR,QAAO,GAAa;QAClB,gBAAgB,gBAAgB,2BAA2B;QAC3D,MAAM,gBAAgB,cAAc,MAAM;QAC1C,gBAAgB,cAAc,MAAM,CAAC,CAAA,WAAY,CAAC,IAAI,QAAQ,CAAC,SAAS,EAAE;QAC1E,uBAAuB,gBAAgB,mBAAmB;QAC1D,OAAO,gBAAgB,cAAc,MAAM;IAC7C;AACF","debugId":null}},
    {"offset": {"line": 433, "column": 0}, "map": {"version":3,"sources":["file:///Users/gwon-oseo/Talksign/apps/app/src/app/api/customers/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server'\nimport { createUserSupabaseClient, getUserFromRequest } from '@/lib/auth-utils'\nimport { MockCustomerService } from '@/lib/mockData'\n\n\nexport async function GET(request: NextRequest) {\n  try {\n    console.log('API Route: GET /api/customers called')\n    \n    // 사용자 인증 확인\n    const userId = await getUserFromRequest(request)\n    if (!userId) {\n      console.log('Unauthorized access attempt')\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })\n    }\n    \n    console.log('Authenticated user:', userId)\n\n    // 개발 환경에서 RLS 우회를 위해 users 테이블에 demo user 먼저 생성\n    if (process.env.NODE_ENV === 'development') {\n      try {\n        const demoUserData = {\n          id: userId,\n          email: 'demo@talksign.co.kr',\n          name: '데모 사용자',\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString()\n        }\n\n        // supabaseAdmin을 사용하여 사용자 생성 (RLS 우회)\n        const { supabaseAdmin } = await import('@/lib/supabase')\n        await supabaseAdmin\n          .from('users')\n          .upsert(demoUserData, { onConflict: 'id' })\n\n        console.log('Demo user ensured for GET request in development')\n      } catch (userError) {\n        console.warn('Failed to ensure demo user:', userError)\n      }\n    }\n\n    // RLS가 적용된 Supabase 클라이언트로 데이터 가져오기\n    try {\n      const supabase = createUserSupabaseClient(request)\n      console.log('Fetching customers for user:', userId)\n      \n      const { data: customers, error } = await supabase\n        .from('customers')\n        .select('*')\n        .order('created_at', { ascending: false })\n\n      if (error) {\n        console.error('Supabase query error:', error)\n        console.log('Error details:', JSON.stringify(error, null, 2))\n        // Supabase 연결 실패 시 mock 데이터 사용 (사용자별로)\n        const customers = MockCustomerService.getAll()\n        console.log('Using mock data, fetched customers:', customers.length)\n        return NextResponse.json(customers)\n      }\n\n      console.log('Successfully fetched customers from Supabase:', customers ? customers.length : 0)\n\n      // Supabase에서 데이터를 가져왔지만 비어있는 경우에도 mock 데이터 사용\n      if (!customers || customers.length === 0) {\n        console.log('No customers in Supabase, using mock data')\n        const mockCustomers = MockCustomerService.getAll()\n        console.log('Using mock data, fetched customers:', mockCustomers.length)\n        return NextResponse.json(mockCustomers)\n      }\n\n      return NextResponse.json(customers)\n    } catch (supabaseError) {\n      console.error('Supabase connection exception:', supabaseError)\n      // 연결 실패 시 mock 데이터 사용\n      const customers = MockCustomerService.getAll()\n      console.log('Using mock data, fetched customers:', customers.length)\n      return NextResponse.json(customers)\n    }\n  } catch (error) {\n    console.error('Unexpected error:', error)\n    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    // 사용자 인증 확인\n    const userId = await getUserFromRequest(request)\n    if (!userId) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })\n    }\n    \n    const body = await request.json()\n    console.log('API Route: POST /api/customers called for user:', userId)\n    console.log('Request body:', body)\n\n    // 입력값 검증\n    const requiredFields = ['company_name', 'representative_name', 'email', 'phone']\n    const missingFields = requiredFields.filter(field => !body[field]?.trim())\n    \n    if (missingFields.length > 0) {\n      return NextResponse.json(\n        { error: `Missing required fields: ${missingFields.join(', ')}` },\n        { status: 400 }\n      )\n    }\n\n    // 이메일 형식 검증\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/\n    if (!emailRegex.test(body.email)) {\n      return NextResponse.json(\n        { error: 'Invalid email format' },\n        { status: 400 }\n      )\n    }\n\n    // 개발 환경에서 RLS 우회를 위해 users 테이블에 demo user 먼저 생성\n    if (process.env.NODE_ENV === 'development') {\n      try {\n        const demoUserData = {\n          id: userId,\n          email: 'demo@talksign.co.kr',\n          name: '데모 사용자',\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString()\n        }\n\n        // supabaseAdmin을 사용하여 사용자 생성 (RLS 우회)\n        const { supabaseAdmin } = await import('@/lib/supabase')\n        await supabaseAdmin\n          .from('users')\n          .upsert(demoUserData, { onConflict: 'id' })\n\n        console.log('Demo user created/updated for development')\n      } catch (userError) {\n        console.warn('Failed to create demo user:', userError)\n      }\n    }\n\n    // Supabase에 데이터 저장 (user_id 포함)\n    try {\n      const supabase = createUserSupabaseClient(request)\n      const { data: newCustomer, error } = await supabase\n        .from('customers')\n        .insert([\n          {\n            user_id: userId,\n            company_name: body.company_name.trim(),\n            representative_name: body.representative_name.trim(),\n            contact_person: body.contact_person?.trim() || null,\n            business_registration_number: body.business_registration_number?.trim() || null,\n            email: body.email.trim(),\n            phone: body.phone.trim(),\n            address: body.address?.trim() || null\n          } as any\n        ])\n        .select()\n        .single()\n\n      if (error) {\n        console.log('Supabase error, using mock data:', error.message)\n        // Supabase 실패 시 mock 데이터 사용\n        const newCustomer = MockCustomerService.create({\n          company_name: body.company_name.trim(),\n          representative_name: body.representative_name.trim(),\n          contact_person: body.contact_person?.trim() || null,\n          business_registration_number: body.business_registration_number?.trim() || null,\n          email: body.email.trim(),\n          phone: body.phone.trim(),\n          address: body.address?.trim() || null\n        })\n        console.log('Customer created with mock data:', newCustomer)\n        return NextResponse.json(newCustomer, { status: 201 })\n      }\n\n      console.log('Customer created in Supabase:', newCustomer)\n      return NextResponse.json(newCustomer, { status: 201 })\n    } catch (supabaseError) {\n      console.log('Supabase connection failed, using mock data:', supabaseError)\n      // Supabase 연결 실패 시 mock 데이터 사용\n      const newCustomer = MockCustomerService.create({\n        company_name: body.company_name.trim(),\n        representative_name: body.representative_name.trim(),\n        contact_person: body.contact_person?.trim() || null,\n        business_registration_number: body.business_registration_number?.trim() || null,\n        email: body.email.trim(),\n        phone: body.phone.trim(),\n        address: body.address?.trim() || null\n      })\n      console.log('Customer created with mock data:', newCustomer)\n      return NextResponse.json(newCustomer, { status: 201 })\n    }\n  } catch (error) {\n    console.error('Unexpected error:', error)\n    return NextResponse.json({ \n      error: 'Internal server error', \n      details: error instanceof Error ? error.message : 'Unknown error' \n    }, { status: 500 })\n  }\n}\n\nexport async function DELETE(request: NextRequest) {\n  try {\n    // 사용자 인증 확인\n    const userId = await getUserFromRequest(request)\n    if (!userId) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })\n    }\n    \n    const body = await request.json()\n    const { customerIds } = body\n    \n    console.log('API Route: DELETE /api/customers called for user:', userId)\n    console.log('Customer IDs to delete:', customerIds)\n\n    if (!customerIds || !Array.isArray(customerIds) || customerIds.length === 0) {\n      return NextResponse.json(\n        { error: 'Customer IDs array is required' },\n        { status: 400 }\n      )\n    }\n\n    // RLS가 적용된 Supabase 클라이언트로 삭제 (사용자 소유 데이터만 삭제 가능)\n    try {\n      const supabase = createUserSupabaseClient(request)\n      const { error } = await supabase\n        .from('customers')\n        .delete()\n        .in('id', customerIds)\n\n      if (error) {\n        console.log('Supabase error, using mock data:', error.message)\n        // Supabase 실패 시 mock 데이터 사용\n        const deletedCount = MockCustomerService.delete(customerIds)\n        console.log('Customers deleted from mock data:', deletedCount)\n        return NextResponse.json({ \n          message: `${deletedCount} customers deleted successfully`,\n          deletedCount: deletedCount \n        }, { status: 200 })\n      }\n\n      console.log('Customers deleted from Supabase:', customerIds.length)\n      return NextResponse.json({ \n        message: `${customerIds.length} customers deleted successfully`,\n        deletedCount: customerIds.length \n      }, { status: 200 })\n    } catch (supabaseError) {\n      console.log('Supabase connection failed, using mock data:', supabaseError)\n      // Supabase 연결 실패 시 mock 데이터 사용\n      const deletedCount = MockCustomerService.delete(customerIds)\n      console.log('Customers deleted from mock data:', deletedCount)\n      return NextResponse.json({ \n        message: `${deletedCount} customers deleted successfully`,\n        deletedCount: deletedCount \n      }, { status: 200 })\n    }\n  } catch (error) {\n    console.error('Unexpected error:', error)\n    return NextResponse.json({ \n      error: 'Internal server error', \n      details: error instanceof Error ? error.message : 'Unknown error' \n    }, { status: 500 })\n  }\n}"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;;;;AAGO,eAAe,IAAI,OAAoB;IAC5C,IAAI;QACF,QAAQ,GAAG,CAAC;QAEZ,YAAY;QACZ,MAAM,SAAS,MAAM,CAAA,GAAA,4IAAA,CAAA,qBAAkB,AAAD,EAAE;QACxC,IAAI,CAAC,QAAQ;YACX,QAAQ,GAAG,CAAC;YACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAe,GAAG;gBAAE,QAAQ;YAAI;QACpE;QAEA,QAAQ,GAAG,CAAC,uBAAuB;QAEnC,gDAAgD;QAChD,wCAA4C;YAC1C,IAAI;gBACF,MAAM,eAAe;oBACnB,IAAI;oBACJ,OAAO;oBACP,MAAM;oBACN,YAAY,IAAI,OAAO,WAAW;oBAClC,YAAY,IAAI,OAAO,WAAW;gBACpC;gBAEA,sCAAsC;gBACtC,MAAM,EAAE,aAAa,EAAE,GAAG;gBAC1B,MAAM,cACH,IAAI,CAAC,SACL,MAAM,CAAC,cAAc;oBAAE,YAAY;gBAAK;gBAE3C,QAAQ,GAAG,CAAC;YACd,EAAE,OAAO,WAAW;gBAClB,QAAQ,IAAI,CAAC,+BAA+B;YAC9C;QACF;QAEA,oCAAoC;QACpC,IAAI;YACF,MAAM,WAAW,CAAA,GAAA,4IAAA,CAAA,2BAAwB,AAAD,EAAE;YAC1C,QAAQ,GAAG,CAAC,gCAAgC;YAE5C,MAAM,EAAE,MAAM,SAAS,EAAE,KAAK,EAAE,GAAG,MAAM,SACtC,IAAI,CAAC,aACL,MAAM,CAAC,KACP,KAAK,CAAC,cAAc;gBAAE,WAAW;YAAM;YAE1C,IAAI,OAAO;gBACT,QAAQ,KAAK,CAAC,yBAAyB;gBACvC,QAAQ,GAAG,CAAC,kBAAkB,KAAK,SAAS,CAAC,OAAO,MAAM;gBAC1D,uCAAuC;gBACvC,MAAM,YAAY,uIAAA,CAAA,sBAAmB,CAAC,MAAM;gBAC5C,QAAQ,GAAG,CAAC,uCAAuC,UAAU,MAAM;gBACnE,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAC3B;YAEA,QAAQ,GAAG,CAAC,iDAAiD,YAAY,UAAU,MAAM,GAAG;YAE5F,8CAA8C;YAC9C,IAAI,CAAC,aAAa,UAAU,MAAM,KAAK,GAAG;gBACxC,QAAQ,GAAG,CAAC;gBACZ,MAAM,gBAAgB,uIAAA,CAAA,sBAAmB,CAAC,MAAM;gBAChD,QAAQ,GAAG,CAAC,uCAAuC,cAAc,MAAM;gBACvE,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAC3B;YAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;QAC3B,EAAE,OAAO,eAAe;YACtB,QAAQ,KAAK,CAAC,kCAAkC;YAChD,sBAAsB;YACtB,MAAM,YAAY,uIAAA,CAAA,sBAAmB,CAAC,MAAM;YAC5C,QAAQ,GAAG,CAAC,uCAAuC,UAAU,MAAM;YACnE,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;QAC3B;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,qBAAqB;QACnC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAwB,GAAG;YAAE,QAAQ;QAAI;IAC7E;AACF;AAEO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,YAAY;QACZ,MAAM,SAAS,MAAM,CAAA,GAAA,4IAAA,CAAA,qBAAkB,AAAD,EAAE;QACxC,IAAI,CAAC,QAAQ;YACX,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAe,GAAG;gBAAE,QAAQ;YAAI;QACpE;QAEA,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,QAAQ,GAAG,CAAC,mDAAmD;QAC/D,QAAQ,GAAG,CAAC,iBAAiB;QAE7B,SAAS;QACT,MAAM,iBAAiB;YAAC;YAAgB;YAAuB;YAAS;SAAQ;QAChF,MAAM,gBAAgB,eAAe,MAAM,CAAC,CAAA,QAAS,CAAC,IAAI,CAAC,MAAM,EAAE;QAEnE,IAAI,cAAc,MAAM,GAAG,GAAG;YAC5B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO,CAAC,yBAAyB,EAAE,cAAc,IAAI,CAAC,OAAO;YAAC,GAChE;gBAAE,QAAQ;YAAI;QAElB;QAEA,YAAY;QACZ,MAAM,aAAa;QACnB,IAAI,CAAC,WAAW,IAAI,CAAC,KAAK,KAAK,GAAG;YAChC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAuB,GAChC;gBAAE,QAAQ;YAAI;QAElB;QAEA,gDAAgD;QAChD,wCAA4C;YAC1C,IAAI;gBACF,MAAM,eAAe;oBACnB,IAAI;oBACJ,OAAO;oBACP,MAAM;oBACN,YAAY,IAAI,OAAO,WAAW;oBAClC,YAAY,IAAI,OAAO,WAAW;gBACpC;gBAEA,sCAAsC;gBACtC,MAAM,EAAE,aAAa,EAAE,GAAG;gBAC1B,MAAM,cACH,IAAI,CAAC,SACL,MAAM,CAAC,cAAc;oBAAE,YAAY;gBAAK;gBAE3C,QAAQ,GAAG,CAAC;YACd,EAAE,OAAO,WAAW;gBAClB,QAAQ,IAAI,CAAC,+BAA+B;YAC9C;QACF;QAEA,gCAAgC;QAChC,IAAI;YACF,MAAM,WAAW,CAAA,GAAA,4IAAA,CAAA,2BAAwB,AAAD,EAAE;YAC1C,MAAM,EAAE,MAAM,WAAW,EAAE,KAAK,EAAE,GAAG,MAAM,SACxC,IAAI,CAAC,aACL,MAAM,CAAC;gBACN;oBACE,SAAS;oBACT,cAAc,KAAK,YAAY,CAAC,IAAI;oBACpC,qBAAqB,KAAK,mBAAmB,CAAC,IAAI;oBAClD,gBAAgB,KAAK,cAAc,EAAE,UAAU;oBAC/C,8BAA8B,KAAK,4BAA4B,EAAE,UAAU;oBAC3E,OAAO,KAAK,KAAK,CAAC,IAAI;oBACtB,OAAO,KAAK,KAAK,CAAC,IAAI;oBACtB,SAAS,KAAK,OAAO,EAAE,UAAU;gBACnC;aACD,EACA,MAAM,GACN,MAAM;YAET,IAAI,OAAO;gBACT,QAAQ,GAAG,CAAC,oCAAoC,MAAM,OAAO;gBAC7D,4BAA4B;gBAC5B,MAAM,cAAc,uIAAA,CAAA,sBAAmB,CAAC,MAAM,CAAC;oBAC7C,cAAc,KAAK,YAAY,CAAC,IAAI;oBACpC,qBAAqB,KAAK,mBAAmB,CAAC,IAAI;oBAClD,gBAAgB,KAAK,cAAc,EAAE,UAAU;oBAC/C,8BAA8B,KAAK,4BAA4B,EAAE,UAAU;oBAC3E,OAAO,KAAK,KAAK,CAAC,IAAI;oBACtB,OAAO,KAAK,KAAK,CAAC,IAAI;oBACtB,SAAS,KAAK,OAAO,EAAE,UAAU;gBACnC;gBACA,QAAQ,GAAG,CAAC,oCAAoC;gBAChD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC,aAAa;oBAAE,QAAQ;gBAAI;YACtD;YAEA,QAAQ,GAAG,CAAC,iCAAiC;YAC7C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC,aAAa;gBAAE,QAAQ;YAAI;QACtD,EAAE,OAAO,eAAe;YACtB,QAAQ,GAAG,CAAC,gDAAgD;YAC5D,+BAA+B;YAC/B,MAAM,cAAc,uIAAA,CAAA,sBAAmB,CAAC,MAAM,CAAC;gBAC7C,cAAc,KAAK,YAAY,CAAC,IAAI;gBACpC,qBAAqB,KAAK,mBAAmB,CAAC,IAAI;gBAClD,gBAAgB,KAAK,cAAc,EAAE,UAAU;gBAC/C,8BAA8B,KAAK,4BAA4B,EAAE,UAAU;gBAC3E,OAAO,KAAK,KAAK,CAAC,IAAI;gBACtB,OAAO,KAAK,KAAK,CAAC,IAAI;gBACtB,SAAS,KAAK,OAAO,EAAE,UAAU;YACnC;YACA,QAAQ,GAAG,CAAC,oCAAoC;YAChD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC,aAAa;gBAAE,QAAQ;YAAI;QACtD;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,qBAAqB;QACnC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,OAAO;YACP,SAAS,iBAAiB,QAAQ,MAAM,OAAO,GAAG;QACpD,GAAG;YAAE,QAAQ;QAAI;IACnB;AACF;AAEO,eAAe,OAAO,OAAoB;IAC/C,IAAI;QACF,YAAY;QACZ,MAAM,SAAS,MAAM,CAAA,GAAA,4IAAA,CAAA,qBAAkB,AAAD,EAAE;QACxC,IAAI,CAAC,QAAQ;YACX,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAe,GAAG;gBAAE,QAAQ;YAAI;QACpE;QAEA,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,MAAM,EAAE,WAAW,EAAE,GAAG;QAExB,QAAQ,GAAG,CAAC,qDAAqD;QACjE,QAAQ,GAAG,CAAC,2BAA2B;QAEvC,IAAI,CAAC,eAAe,CAAC,MAAM,OAAO,CAAC,gBAAgB,YAAY,MAAM,KAAK,GAAG;YAC3E,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAiC,GAC1C;gBAAE,QAAQ;YAAI;QAElB;QAEA,kDAAkD;QAClD,IAAI;YACF,MAAM,WAAW,CAAA,GAAA,4IAAA,CAAA,2BAAwB,AAAD,EAAE;YAC1C,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,SACrB,IAAI,CAAC,aACL,MAAM,GACN,EAAE,CAAC,MAAM;YAEZ,IAAI,OAAO;gBACT,QAAQ,GAAG,CAAC,oCAAoC,MAAM,OAAO;gBAC7D,4BAA4B;gBAC5B,MAAM,eAAe,uIAAA,CAAA,sBAAmB,CAAC,MAAM,CAAC;gBAChD,QAAQ,GAAG,CAAC,qCAAqC;gBACjD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;oBACvB,SAAS,GAAG,aAAa,+BAA+B,CAAC;oBACzD,cAAc;gBAChB,GAAG;oBAAE,QAAQ;gBAAI;YACnB;YAEA,QAAQ,GAAG,CAAC,oCAAoC,YAAY,MAAM;YAClE,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBACvB,SAAS,GAAG,YAAY,MAAM,CAAC,+BAA+B,CAAC;gBAC/D,cAAc,YAAY,MAAM;YAClC,GAAG;gBAAE,QAAQ;YAAI;QACnB,EAAE,OAAO,eAAe;YACtB,QAAQ,GAAG,CAAC,gDAAgD;YAC5D,+BAA+B;YAC/B,MAAM,eAAe,uIAAA,CAAA,sBAAmB,CAAC,MAAM,CAAC;YAChD,QAAQ,GAAG,CAAC,qCAAqC;YACjD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBACvB,SAAS,GAAG,aAAa,+BAA+B,CAAC;gBACzD,cAAc;YAChB,GAAG;gBAAE,QAAQ;YAAI;QACnB;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,qBAAqB;QACnC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,OAAO;YACP,SAAS,iBAAiB,QAAQ,MAAM,OAAO,GAAG;QACpD,GAAG;YAAE,QAAQ;QAAI;IACnB;AACF","debugId":null}}]
}